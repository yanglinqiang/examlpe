/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.ylq.example.fiangle;

import com.twitter.finagle.thrift.ThriftClientRequest;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Future;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class BrandServ {
    public interface Iface {
        public String getBrandCodeById(int id) throws TException;

        public int getIdByBrandCode(String brandCode) throws TException;
    }

    public interface AsyncIface {
        public void getBrandCodeById(int id, AsyncMethodCallback<AsyncClient.getBrandCodeById_call> resultHandler) throws TException;

        public void getIdByBrandCode(String brandCode, AsyncMethodCallback<AsyncClient.getIdByBrandCode_call> resultHandler) throws TException;
    }

    public interface ServiceIface {
        public Future<String> getBrandCodeById(int id);

        public Future<Integer> getIdByBrandCode(String brandCode);
    }

    public static class Client implements TServiceClient, Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot) {
            this(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;

        protected int seqid_;

        public TProtocol getInputProtocol() {
            return this.iprot_;
        }

        public TProtocol getOutputProtocol() {
            return this.oprot_;
        }

        public String getBrandCodeById(int id) throws TException {
            send_getBrandCodeById(id);
            return recv_getBrandCodeById();
        }

        public void send_getBrandCodeById(int id) throws TException {
            oprot_.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.CALL, ++seqid_));
            getBrandCodeById_args args = new getBrandCodeById_args();
            args.setId(id);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public String recv_getBrandCodeById() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBrandCodeById failed: out of sequence response");
            }
            getBrandCodeById_result result = new getBrandCodeById_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBrandCodeById failed: unknown result");
        }

        public int getIdByBrandCode(String brandCode) throws TException {
            send_getIdByBrandCode(brandCode);
            return recv_getIdByBrandCode();
        }

        public void send_getIdByBrandCode(String brandCode) throws TException {
            oprot_.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.CALL, ++seqid_));
            getIdByBrandCode_args args = new getIdByBrandCode_args();
            args.setBrandCode(brandCode);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public int recv_getIdByBrandCode() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getIdByBrandCode failed: out of sequence response");
            }
            getIdByBrandCode_result result = new getIdByBrandCode_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getIdByBrandCode failed: unknown result");
        }
    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getBrandCodeById(int id, AsyncMethodCallback<getBrandCodeById_call> resultHandler) throws TException {
            checkReady();
            getBrandCodeById_call method_call = new getBrandCodeById_call(id, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getBrandCodeById_call extends TAsyncMethodCall {
            private int id;

            public getBrandCodeById_call(int id, AsyncMethodCallback<getBrandCodeById_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.CALL, 0));
                getBrandCodeById_args args = new getBrandCodeById_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBrandCodeById();
            }
        }

        public void getIdByBrandCode(String brandCode, AsyncMethodCallback<getIdByBrandCode_call> resultHandler) throws TException {
            checkReady();
            getIdByBrandCode_call method_call = new getIdByBrandCode_call(brandCode, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getIdByBrandCode_call extends TAsyncMethodCall {
            private String brandCode;

            public getIdByBrandCode_call(String brandCode, AsyncMethodCallback<getIdByBrandCode_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.brandCode = brandCode;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.CALL, 0));
                getIdByBrandCode_args args = new getIdByBrandCode_args();
                args.setBrandCode(brandCode);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getIdByBrandCode();
            }
        }
    }


    public static class ServiceToClient implements ServiceIface {
        private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
        private TProtocolFactory protocolFactory;

        public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {

            this.service = service;
            this.protocolFactory = protocolFactory;
        }

        public Future<String> getBrandCodeById(int id) {
            try {
                // TODO: size
                TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
                TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
                __prot__.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.CALL, 0));
                getBrandCodeById_args __args__ = new getBrandCodeById_args();
                __args__.setId(id);
                __args__.write(__prot__);
                __prot__.writeMessageEnd();


                byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
                ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
                Future<byte[]> __done__ = this.service.apply(__request__);
                return __done__.flatMap(new Function<byte[], Future<String>>() {
                    public Future<String> apply(byte[] __buffer__) {
                        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                        TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                        try {
                            return Future.value((new Client(__prot__)).recv_getBrandCodeById());
                        } catch (Exception e) {
                            return Future.exception(e);
                        }
                    }
                });
            } catch (TException e) {
                return Future.exception(e);
            }
        }

        public Future<Integer> getIdByBrandCode(String brandCode) {
            try {
                // TODO: size
                TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
                TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
                __prot__.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.CALL, 0));
                getIdByBrandCode_args __args__ = new getIdByBrandCode_args();
                __args__.setBrandCode(brandCode);
                __args__.write(__prot__);
                __prot__.writeMessageEnd();


                byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
                ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
                Future<byte[]> __done__ = this.service.apply(__request__);
                return __done__.flatMap(new Function<byte[], Future<Integer>>() {
                    public Future<Integer> apply(byte[] __buffer__) {
                        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                        TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                        try {
                            return Future.value((new Client(__prot__)).recv_getIdByBrandCode());
                        } catch (Exception e) {
                            return Future.exception(e);
                        }
                    }
                });
            } catch (TException e) {
                return Future.exception(e);
            }
        }
    }

    public static class Processor implements TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(Iface iface) {
            iface_ = iface;
            processMap_.put("getBrandCodeById", new getBrandCodeById());
            processMap_.put("getIdByBrandCode", new getIdByBrandCode());
        }

        protected static interface ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
        }

        private Iface iface_;
        protected final HashMap<String, ProcessFunction> processMap_ = new HashMap<String, ProcessFunction>();

        public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
            TMessage msg = iprot.readMessageBegin();
            ProcessFunction fn = processMap_.get(msg.name);
            if (fn == null) {
                TProtocolUtil.skip(iprot, TType.STRUCT);
                iprot.readMessageEnd();
                TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
                oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                x.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
                return true;
            }
            fn.process(msg.seqid, iprot, oprot);
            return true;
        }

        private class getBrandCodeById implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getBrandCodeById_args args = new getBrandCodeById_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getBrandCodeById_result result = new getBrandCodeById_result();
                result.success = iface_.getBrandCodeById(args.id);

                oprot.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }
        }

        private class getIdByBrandCode implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getIdByBrandCode_args args = new getIdByBrandCode_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getIdByBrandCode_result result = new getIdByBrandCode_result();
                result.success = iface_.getIdByBrandCode(args.brandCode);
                result.setSuccessIsSet(true);
                oprot.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }
        }
    }

    public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
        private final ServiceIface iface;
        private final TProtocolFactory protocolFactory;
        protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();

        public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
            this.iface = iface;
            this.protocolFactory = protocolFactory;
            functionMap.put("getBrandCodeById", new Function2<TProtocol, Integer, Future<byte[]>>() {
                public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
                    getBrandCodeById_args args = new getBrandCodeById_args();
                    try {
                        args.read(iprot);
                    } catch (TProtocolException e) {
                        try {
                            iprot.readMessageEnd();
                            TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                            TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                            TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                            oprot.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.EXCEPTION, seqid));
                            x.write(oprot);
                            oprot.writeMessageEnd();
                            oprot.getTransport().flush();
                            byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
                            return Future.value(buffer);
                        } catch (Exception e1) {
                            return Future.exception(e1);
                        }
                    } catch (Exception e) {
                        return Future.exception(e);
                    }

                    try {
                        iprot.readMessageEnd();
                    } catch (Exception e) {
                        return Future.exception(e);
                    }
                    Future<String> future;
                    try {
                        future = iface.getBrandCodeById(args.id);
                    } catch (Exception e) {
                        future = Future.exception(e);
                    }

                    try {
                        return future.flatMap(new Function<String, Future<byte[]>>() {
                            public Future<byte[]> apply(String value) {
                                getBrandCodeById_result result = new getBrandCodeById_result();
                                result.success = value;
                                result.setSuccessIsSet(true);

                                try {
                                    TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                                    TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                                    oprot.writeMessageBegin(new TMessage("getBrandCodeById", TMessageType.REPLY, seqid));
                                    result.write(oprot);
                                    oprot.writeMessageEnd();

                                    return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                                } catch (Exception e) {
                                    return Future.exception(e);
                                }
                            }
                        }).rescue(new Function<Throwable, Future<byte[]>>() {
                            public Future<byte[]> apply(Throwable t) {
                                return Future.exception(t);
                            }
                        });
                    } catch (Exception e) {
                        return Future.exception(e);
                    }
                }
            });
            functionMap.put("getIdByBrandCode", new Function2<TProtocol, Integer, Future<byte[]>>() {
                public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
                    getIdByBrandCode_args args = new getIdByBrandCode_args();
                    try {
                        args.read(iprot);
                    } catch (TProtocolException e) {
                        try {
                            iprot.readMessageEnd();
                            TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                            TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                            TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                            oprot.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.EXCEPTION, seqid));
                            x.write(oprot);
                            oprot.writeMessageEnd();
                            oprot.getTransport().flush();
                            byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
                            return Future.value(buffer);
                        } catch (Exception e1) {
                            return Future.exception(e1);
                        }
                    } catch (Exception e) {
                        return Future.exception(e);
                    }

                    try {
                        iprot.readMessageEnd();
                    } catch (Exception e) {
                        return Future.exception(e);
                    }
                    Future<Integer> future;
                    try {
                        future = iface.getIdByBrandCode(args.brandCode);
                    } catch (Exception e) {
                        future = Future.exception(e);
                    }

                    try {
                        return future.flatMap(new Function<Integer, Future<byte[]>>() {
                            public Future<byte[]> apply(Integer value) {
                                getIdByBrandCode_result result = new getIdByBrandCode_result();
                                result.success = value;
                                result.setSuccessIsSet(true);

                                try {
                                    TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                                    TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                                    oprot.writeMessageBegin(new TMessage("getIdByBrandCode", TMessageType.REPLY, seqid));
                                    result.write(oprot);
                                    oprot.writeMessageEnd();

                                    return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                                } catch (Exception e) {
                                    return Future.exception(e);
                                }
                            }
                        }).rescue(new Function<Throwable, Future<byte[]>>() {
                            public Future<byte[]> apply(Throwable t) {
                                return Future.exception(t);
                            }
                        });
                    } catch (Exception e) {
                        return Future.exception(e);
                    }
                }
            });
        }

        public Future<byte[]> apply(byte[] request) {
            TTransport inputTransport = new TMemoryInputTransport(request);
            TProtocol iprot = protocolFactory.getProtocol(inputTransport);

            TMessage msg;
            try {
                msg = iprot.readMessageBegin();
            } catch (Exception e) {
                return Future.exception(e);
            }

            Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
            if (fn == null) {
                try {
                    TProtocolUtil.skip(iprot, TType.STRUCT);
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
                    TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                    TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                    oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                    return Future.exception(e);
                }
            }

            return fn.apply(iprot, msg.seqid);
        }
    }

    public static class getBrandCodeById_args implements TBase<getBrandCodeById_args, getBrandCodeById_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getBrandCodeById_args");

        private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short) 1);


        public int id;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ID((short) 1, "id");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getBrandCodeById_args.class, metaDataMap);
        }


        public getBrandCodeById_args() {
        }

        public getBrandCodeById_args(
                int id) {
            this();
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBrandCodeById_args(getBrandCodeById_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.id = other.id;
        }

        public getBrandCodeById_args deepCopy() {
            return new getBrandCodeById_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
        }

        public int getId() {
            return this.id;
        }

        public getBrandCodeById_args setId(int id) {
            this.id = id;
            setIdIsSet(true);

            return this;
        }

        public void unsetId() {
            __isset_bit_vector.clear(__ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been asigned a value) and false otherwise
         */
        public boolean isSetId() {
            return __isset_bit_vector.get(__ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bit_vector.set(__ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((Integer) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return new Integer(getId());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBrandCodeById_args)
                return this.equals((getBrandCodeById_args) that);
            return false;
        }

        public boolean equals(getBrandCodeById_args that) {
            if (that == null)
                return false;
            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            HashCodeBuilder builder = new HashCodeBuilder();
            boolean present_id = true;
            builder.append(present_id);
            if (present_id)
                builder.append(id);
            return builder.toHashCode();
        }

        public int compareTo(getBrandCodeById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getBrandCodeById_args typedOther = (getBrandCodeById_args) other;

            lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // ID
                        if (field.type == TType.I32) {
                            this.id = iprot.readI32();
                            setIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI32(this.id);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBrandCodeById_args(");
            boolean first = true;
            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }

    public static class getBrandCodeById_result implements TBase<getBrandCodeById_result, getBrandCodeById_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getBrandCodeById_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);


        public String success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getBrandCodeById_result.class, metaDataMap);
        }


        public getBrandCodeById_result() {
        }

        public getBrandCodeById_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBrandCodeById_result(getBrandCodeById_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getBrandCodeById_result deepCopy() {
            return new getBrandCodeById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getBrandCodeById_result setSuccess(String success) {
            this.success = success;

            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBrandCodeById_result)
                return this.equals((getBrandCodeById_result) that);
            return false;
        }

        public boolean equals(getBrandCodeById_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            HashCodeBuilder builder = new HashCodeBuilder();
            boolean present_success = true && (isSetSuccess());
            builder.append(present_success);
            if (present_success)
                builder.append(success);
            return builder.toHashCode();
        }

        public int compareTo(getBrandCodeById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getBrandCodeById_result typedOther = (getBrandCodeById_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.STRING) {
                            this.success = iprot.readString();
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);
            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeString(this.success);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBrandCodeById_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }


    public static class getIdByBrandCode_args implements TBase<getIdByBrandCode_args, getIdByBrandCode_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getIdByBrandCode_args");

        private static final TField BRAND_CODE_FIELD_DESC = new TField("brandCode", TType.STRING, (short) 1);


        public String brandCode;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            BRAND_CODE((short) 1, "brandCode");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // BRAND_CODE
                        return BRAND_CODE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BRAND_CODE, new FieldMetaData("brandCode", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getIdByBrandCode_args.class, metaDataMap);
        }


        public getIdByBrandCode_args() {
        }

        public getIdByBrandCode_args(
                String brandCode) {
            this();
            this.brandCode = brandCode;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getIdByBrandCode_args(getIdByBrandCode_args other) {
            if (other.isSetBrandCode()) {
                this.brandCode = other.brandCode;
            }
        }

        public getIdByBrandCode_args deepCopy() {
            return new getIdByBrandCode_args(this);
        }

        @Override
        public void clear() {
            this.brandCode = null;
        }

        public String getBrandCode() {
            return this.brandCode;
        }

        public getIdByBrandCode_args setBrandCode(String brandCode) {
            this.brandCode = brandCode;

            return this;
        }

        public void unsetBrandCode() {
            this.brandCode = null;
        }

        /**
         * Returns true if field brandCode is set (has been asigned a value) and false otherwise
         */
        public boolean isSetBrandCode() {
            return this.brandCode != null;
        }

        public void setBrandCodeIsSet(boolean value) {
            if (!value) {
                this.brandCode = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BRAND_CODE:
                    if (value == null) {
                        unsetBrandCode();
                    } else {
                        setBrandCode((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BRAND_CODE:
                    return getBrandCode();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BRAND_CODE:
                    return isSetBrandCode();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getIdByBrandCode_args)
                return this.equals((getIdByBrandCode_args) that);
            return false;
        }

        public boolean equals(getIdByBrandCode_args that) {
            if (that == null)
                return false;
            boolean this_present_brandCode = true && this.isSetBrandCode();
            boolean that_present_brandCode = true && that.isSetBrandCode();
            if (this_present_brandCode || that_present_brandCode) {
                if (!(this_present_brandCode && that_present_brandCode))
                    return false;
                if (!this.brandCode.equals(that.brandCode))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            HashCodeBuilder builder = new HashCodeBuilder();
            boolean present_brandCode = true && (isSetBrandCode());
            builder.append(present_brandCode);
            if (present_brandCode)
                builder.append(brandCode);
            return builder.toHashCode();
        }

        public int compareTo(getIdByBrandCode_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getIdByBrandCode_args typedOther = (getIdByBrandCode_args) other;

            lastComparison = Boolean.valueOf(isSetBrandCode()).compareTo(typedOther.isSetBrandCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBrandCode()) {
                lastComparison = TBaseHelper.compareTo(this.brandCode, typedOther.brandCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // BRAND_CODE
                        if (field.type == TType.STRING) {
                            this.brandCode = iprot.readString();
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.brandCode != null) {
                oprot.writeFieldBegin(BRAND_CODE_FIELD_DESC);
                oprot.writeString(this.brandCode);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getIdByBrandCode_args(");
            boolean first = true;
            sb.append("brandCode:");
            if (this.brandCode == null) {
                sb.append("null");
            } else {
                sb.append(this.brandCode);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }

    public static class getIdByBrandCode_result implements TBase<getIdByBrandCode_result, getIdByBrandCode_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getIdByBrandCode_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short) 0);


        public int success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getIdByBrandCode_result.class, metaDataMap);
        }


        public getIdByBrandCode_result() {
        }

        public getIdByBrandCode_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getIdByBrandCode_result(getIdByBrandCode_result other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.success = other.success;
        }

        public getIdByBrandCode_result deepCopy() {
            return new getIdByBrandCode_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public getIdByBrandCode_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);

            return this;
        }

        public void unsetSuccess() {
            __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return new Integer(getSuccess());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getIdByBrandCode_result)
                return this.equals((getIdByBrandCode_result) that);
            return false;
        }

        public boolean equals(getIdByBrandCode_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            HashCodeBuilder builder = new HashCodeBuilder();
            boolean present_success = true;
            builder.append(present_success);
            if (present_success)
                builder.append(success);
            return builder.toHashCode();
        }

        public int compareTo(getIdByBrandCode_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getIdByBrandCode_result typedOther = (getIdByBrandCode_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.I32) {
                            this.success = iprot.readI32();
                            setSuccessIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);
            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeI32(this.success);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getIdByBrandCode_result(");
            boolean first = true;
            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }


}